import os
import torch
import torch.nn as nn
from torchvision import models, transforms
from PIL import Image
import streamlit as st
import gdown
import pandas as pd
import re

# ==== CONFIG ====
CLASS_NAMES = [
    "Galaxy_A06",
    "Galaxy_A05S",
    "Galaxy_A32",
    "iPhone_11",
    "iPhone_12",
    "iPhone_13",
    "iPhone_15"
]

CSV_DRIVE_URL = "https://drive.google.com/uc?id=1xEccDMzWIHPEop58SlQdJwITr5y50mNj"
MODEL_DRIVE_URL = "https://drive.google.com/uc?id=1IGRYczTwiaGnouIOGI6QAzPPZOh0Jdj8"  # ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà e_waste_model_new.pth
MODEL_FILENAME = "e_waste_model_new.pth"
CSV_FILENAME = "phone_battery_info.csv"

# ==== ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• ResNet50 ====
@st.cache_resource
def load_model(model_path):
    checkpoint = torch.load(model_path, map_location=torch.device('cpu'))

    # ‡πÇ‡∏´‡∏•‡∏î ResNet50 (‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡πÄ‡∏ó‡∏£‡∏ô)
    model = models.resnet50(pretrained=False)

    # ‡πÉ‡∏ä‡πâ num_classes ‡∏à‡∏≤‡∏Å checkpoint ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if "num_classes" in checkpoint:
        num_classes = checkpoint["num_classes"]
    else:
        num_classes = len(CLASS_NAMES)

    model.fc = nn.Linear(model.fc.in_features, num_classes)
    model.load_state_dict(checkpoint["model_state_dict"])
    model.eval()
    return model

def download_model():
    if not os.path.exists(MODEL_FILENAME):
        gdown.download(MODEL_DRIVE_URL, MODEL_FILENAME, quiet=False)
    return MODEL_FILENAME

# ==== ‡πÇ‡∏´‡∏•‡∏î CSV ====
@st.cache_data
def load_battery_data():
    if not os.path.exists(CSV_FILENAME):
        gdown.download(CSV_DRIVE_URL, CSV_FILENAME, quiet=False)
    return pd.read_csv(CSV_FILENAME)

# ==== ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏†‡∏≤‡∏û ====
val_transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406],
                         [0.229, 0.224, 0.225])
])

def predict_image(model, img):
    image = Image.open(img).convert('RGB')
    image = val_transform(image).unsqueeze(0)
    with torch.no_grad():
        outputs = model(image)
        _, preds = torch.max(outputs, 1)
    if preds.item() < len(CLASS_NAMES):
        return CLASS_NAMES[preds.item()]
    else:
        return f"Class {preds.item()}"

# ==== ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÉ‡∏ô CSV ====
def find_closest_model(df, predicted_class):
    predicted_normalized = predicted_class.lower().replace("_", "").replace("-", "").replace(" ", "")
    for _, row in df.iterrows():
        model_name = str(row['model']).lower().replace("_", "").replace("-", "").replace(" ", "")
        if predicted_normalized in model_name or model_name in predicted_normalized:
            return row
    return None

# ==== ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Danger Score ====
def grade_battery_danger(row):
    score = 0
    info = str(row['battery_info'])
    if 'Li-Po' in info:
        score += 2
    elif 'Li-Ion' in info:
        score += 1

    capacity_text = str(row['mAh'])
    match = re.search(r'(\d{3,5})', capacity_text)
    if match:
        capacity = int(match.group(1))
        if capacity <= 3000:
            score += 1
        elif 3000 < capacity <= 4000:
            score += 2
        else:
            score += 3

    removable = str(row['remove']).lower()
    if 'non-removable' in removable:
        score += 3
    else:
        score += 1

    wh_text = str(row['wh'])
    if re.search(r'\d+\.\d+', wh_text):
        score += 2

    return score * 100

# ==== Streamlit UI ====
st.set_page_config(page_title="E-WASTE", page_icon="‚ôªÔ∏è", layout="centered")

# Header
st.markdown(
    """
    <h1 style='text-align:center; color:green;'>‚ôªÔ∏è E-WASTE</h1>
    <p style='text-align:center; font-size:18px;'>‚Äú‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÇ‡∏•‡∏Å‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‚Äù</p>
    """,
    unsafe_allow_html=True
)

model_path = download_model()
model = load_model(model_path)
df = load_battery_data()

# Upload or Take Photo
st.subheader("üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ñ‡πà‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û")
uploaded_file = st.file_uploader("", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    st.image(uploaded_file, caption="üì∑ Uploaded Image", use_column_width=True)
    predicted_class = predict_image(model, uploaded_file)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∏‡πà‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
    st.markdown(f"### üì± ‡∏£‡∏∏‡πà‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö: **{predicted_class}**")

    row = find_closest_model(df, predicted_class)

    if row is not None:
        score = grade_battery_danger(row)
        st.markdown(f"**Score:** {score}")
        
        if "Li-Po" in str(row['battery_info']):
            st.write("üì± ‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà Li-Po ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ‡∏•‡∏¥‡πÄ‡∏ó‡∏µ‡∏¢‡∏° ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡πÑ‡∏ü‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏à‡∏•‡πÇ‡∏û‡∏•‡∏¥‡πÄ‡∏°‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏ß‡πÑ‡∏ü ‡πÅ‡∏•‡∏∞‡πÇ‡∏•‡∏´‡∏∞‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏Ñ‡∏ö‡∏≠‡∏•‡∏ï‡πå ‡∏ô‡∏¥‡∏Å‡πÄ‡∏Å‡∏¥‡∏• ‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡∏á‡∏Å‡∏≤‡∏ô‡∏µ‡∏™ ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡∏Å‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏û‡∏¥‡∏©‡∏ï‡πà‡∏≠‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢ ‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏ô‡πÄ‡∏õ‡∏∑‡πâ‡∏≠‡∏ô‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏° ‡∏´‡∏≤‡∏Å‡πÅ‡∏ö‡∏ï‡∏£‡∏±‡πà‡∏ß ‡∏ö‡∏ß‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡πÄ‡∏ú‡∏≤")

        st.markdown(
            """
            <div style='background-color:#90EE90; padding:10px; border-radius:8px; text-align:center; font-weight:bold;'>
                ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            </div>
            """,
            unsafe_allow_html=True
        )

        # ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
        st.markdown("[üìç ‡∏®‡∏π‡∏ô‡∏¢‡πå AIS ‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏£‡∏±‡∏•‡πÅ‡∏≠‡∏£‡πå‡∏û‡∏≠‡∏£‡πå‡∏ï ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà](https://goo.gl/maps/v6PbX3CgCxVzZSTV9)", unsafe_allow_html=True)
        st.markdown("[üìç Siam TV ‡∏™‡∏≤‡∏Ç‡∏≤‡∏´‡∏≤‡∏á‡∏î‡∏á](https://goo.gl/maps/qN4F7vD3EJXoAXkT8)", unsafe_allow_html=True)
        st.markdown("[üìç ‡∏®‡∏π‡∏ô‡∏¢‡πå True ‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏£‡∏±‡∏•‡πÄ‡∏ü‡∏™‡∏ï‡∏¥‡∏ß‡∏±‡∏•‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà](https://goo.gl/maps/gnN4B4vRkDKGzQTF9)", unsafe_allow_html=True)

    else:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∏‡πà‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV.")
