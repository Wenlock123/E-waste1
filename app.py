import os
import torch
import torch.nn as nn
from torchvision import models, transforms
from PIL import Image
import streamlit as st
import gdown
import pandas as pd
import re

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏≤‡∏™‡πÅ‡∏Ñ‡πà 2 ‡∏ï‡∏±‡∏ß
CLASS_NAMES = ["Galaxy_A32", "iPhone_11"]

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
@st.cache_resource
def load_model(model_path):
    model = models.resnet18(pretrained=False)
    model.fc = nn.Linear(model.fc.in_features, len(CLASS_NAMES))  # 2 ‡∏Ñ‡∏•‡∏≤‡∏™
    model.load_state_dict(torch.load(model_path, map_location=torch.device('cpu')))
    model.eval()
    return model

# ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
def download_model():
    model_path = "best_model_fixed.pth"
    if not os.path.exists(model_path):
        file_id = "1vud0Qk1PHy7_jLgSUwwurUN7KKw1WeIw"
        url = f"https://drive.google.com/uc?id={file_id}"
        gdown.download(url, model_path, quiet=False)
    return model_path

# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
val_transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406],
                         [0.229, 0.224, 0.225])
])

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏†‡∏≤‡∏û
def predict_image(model, img):
    image = Image.open(img).convert('RGB')
    image = val_transform(image).unsqueeze(0)
    with torch.no_grad():
        outputs = model(image)
        _, preds = torch.max(outputs, 1)
    return CLASS_NAMES[preds.item()]

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì danger score (‡∏Ñ‡∏π‡∏ì 1000)
def grade_battery_danger(row):
    score = 0

    # Battery type
    info = str(row['battery_info'])
    if 'Li-Po' in info:
        score += 2
    elif 'Li-Ion' in info:
        score += 1

    # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà (mAh)
    capacity_text = str(row['mAh'])
    match = re.search(r'(\d{3,5})', capacity_text)
    if match:
        capacity = int(match.group(1))
        if capacity <= 3000:
            score += 1
        elif 3000 < capacity <= 4000:
            score += 2
        else:
            score += 3

    # ‡∏ñ‡∏≠‡∏î‡πÅ‡∏ö‡∏ï‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°
    removable = str(row['remove']).lower()
    if 'non-removable' in removable:
        score += 3
    else:
        score += 1

    # Wh
    wh_text = str(row['wh'])
    if re.search(r'\d+\.\d+', wh_text):
        score += 2

    return score * 1000  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏ô

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV
@st.cache_data
def load_battery_data():
    csv_path = "phone_battery_info.csv"
    return pd.read_csv(csv_path)

# ====== Streamlit App ======
st.title("üîã Mobile Battery Classifier with Danger Score")

model_path = download_model()
model = load_model(model_path)
df = load_battery_data()

uploaded_file = st.file_uploader("üì§ Upload a phone image", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    st.image(uploaded_file, caption="üì∑ Uploaded Image", use_column_width=True)
    predicted_class = predict_image(model, uploaded_file)
    st.success(f"üì± Predicted Model: **{predicted_class}**")

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö predicted_class
    row = df[df['model'].str.contains(predicted_class, case=False, na=False)]
    if not row.empty:
        row = row.iloc[0]  # ‡πÉ‡∏ä‡πâ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
        score = grade_battery_danger(row)
        st.markdown(f"üí• **Danger Score:** `{score}`")
        st.write("üîé Battery Info:")
        st.write({
            "Battery": row["battery_info"],
            "Capacity (mAh)": row["mAh"],
            "Removable": row["remove"],
            "Wh": row["wh"]
        })
    else:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∏‡πà‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV.")
