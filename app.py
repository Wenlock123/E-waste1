import streamlit as st
import torch
import torchvision.transforms as transforms
from PIL import Image
import json

# ----- ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• -----
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ñ‡∏ß‡∏£‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ï‡∏≠‡∏ô train
model = ...  # ‡πÉ‡∏™‡πà‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÄ‡∏ä‡πà‡∏ô resnet18(pretrained=False)
model.load_state_dict(torch.load("model.pth", map_location=device))
model.to(device)
model.eval()

# ----- ‡πÇ‡∏´‡∏•‡∏î label -----
with open("labels.json") as f:
    idx_to_label = json.load(f)

# ----- Transform -----
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
])

# ----- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢ -----
def get_battery_risk_score(phone_model):
    risk_scores = {
        "iPhone 11": 3.5,
        "Galaxy A32": 4.2,
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å
    }
    return risk_scores.get(phone_model, "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

# ----- Streamlit UI -----
st.title("üîç Mobile Battery Classifier")

uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠", type=["jpg", "png", "jpeg"])
if uploaded_file is not None:
    image = Image.open(uploaded_file).convert("RGB")
    st.image(image, caption="üì∑ ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", use_column_width=True)

    # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    img_tensor = transform(image).unsqueeze(0).to(device)
    with torch.no_grad():
        outputs = model(img_tensor)
        _, predicted = torch.max(outputs, 1)
        class_id = str(predicted.item())
        phone_model = idx_to_label.get(class_id, "Unknown")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    st.markdown(f"### üì± ‡∏£‡∏∏‡πà‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠: `{phone_model}`")
    score = get_battery_risk_score(phone_model)
    st.markdown(f"### ‚ö†Ô∏è ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà: `{score}`")
